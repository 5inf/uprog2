
#################################################################################
#										#
# SPC560B-Bootcode for uprog2							#
# version 1.10									#
#										#
# copyright (c) 2014-2016 Joerg Wolfram (joerg@jcwolfram.de)			#
#										#
# This program is free software; you can redistribute it and/or			#
# modify it under the terms of the GNU General Public License			#
# as published by the Free Software Foundation; either version 2		#
# of the License, or (at your option) any later version.			#
#										#
# This program is distributed in the hope that it will be useful,		#
# but WITHOUT ANY WARRANTY; without even the implied warranty of		#
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU		#
# General Public License for more details.					#
#										#
# You should have received a copy of the GNU General Public			#
# License along with this library; if not, write to the				#
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,			#
# Boston, MA 02111-1307, USA.							#
#										#
#################################################################################

			.include "/usr/local/toolchain/powerpc-vle-elf/include_asm/regs_spc56el.asm"

			.equ	block_size,2048
			.equ	DEBUG_LED,0
			
			.text
			.org 0x00100

main_start:

################################################################################
# set mode
################################################################################
			e_lis		r24,FMPLL_BASE
			e_lis		r28,0x0220		#f * 4
			e_li		r29,0x100
			se_or		r28,r29
			e_stw		r28,FMPLL_CR(r24)

			e_lis		r24,ME_BASE
			e_li		r25,ME_DRUN_MC
			se_or		r25,r24
			e_lis		r29,0x009F		#DRUN
			e_li		r28,0x0074
			se_or		r28,r29
			se_stw		r28,0(r25)

			e_lis		rsp,0x4000		#set stack pointer
			e_li		r25,0x8000
			se_or		rsp,r25

			e_lis		r24,ME_BASE
			e_li		r25,ME_RUN_PC0
			se_or		r25,r24
			e_li		r28,0xfe
			e_stw		r28,0(r25)

			e_li		r25,ME_MCTL
			se_or		r25,r24
			e_lis		r29,0x3000		#DRUN
			e_li		r28,0x5af0
			se_or		r28,r29
			se_stw		r28,0(r25)
			e_li		r28,0xa50f
			se_or		r28,r29
			se_stw		r28,0(r25)

			#fill RAM
			e_lis		r28,0x4000		#f * 4
			e_li		r29,0x0800
			se_or		r28,r29
			e_li		r30,0x00
			e_li		r27,0x00
rfill_1:		e_stw		r30,0(r28)
			e_add16i	r28,r28,4
			e_add16i	r27,r27,1
			e_cmp16i	r27,0x1e00
			se_bne		rfill_1


################################################################################
# set IO
################################################################################
			e_lis		r24,SIUL_BASE
.if DEBUG_LED == 1
			e_li		r25,PCR45
			se_or		r25,r24
			e_li		r28,0x0204
			se_sth		r28,0x0(r25)
			se_sth		r28,0x2(r25)
.endif
			e_li		r25,PCR16
			se_or		r25,r24
			e_li		r28,0x0400		#LINFLEX 0 output
			se_sth		r28,0x4(r25)
			e_li		r28,0x0103		#LINFLEX 0 input
			se_sth		r28,0x6(r25)


################################################################################
# set LINFLEX to UART mode
################################################################################
			e_lis		r24,LINFLEX0_BASE
			se_li		r28,1				#INIT mode
			e_stw		r28,LINCR1(r24)
			se_li		r28,8	#17
			e_stw		r28,LINIBRR(r24)
			se_li		r28,0	#6
			e_stw		r28,LINFBRR(r24)
			e_li		r28,0x01
			e_stw		r28,UARTCR(r24)
			e_li		r28,0x33
			e_stw		r28,UARTCR(r24)
			se_li		r28,0				# RUN mode
			e_stw		r28,LINCR1(r24)


################################################################################
# prepare flash
################################################################################
			e_lis		r26,PFLASH_BASE		#MCR address
			e_li		r25,PFLASH_MCR
			se_or		r26,r25

			e_lis		r2,0xa1a1		#password LML
			e_li		r3,0x1111
			se_or		r3,r2
			se_stw		r3,4(r26)		#write password

			e_lis		r2,0xb2b2		#password HBL
			e_li		r3,0x2222
			se_or		r3,r2
			se_stw		r3,8(r26)		#write password

			e_lis		r2,0xc3c3		#password SLL
			e_li		r3,0x3333
			se_or		r3,r2
			se_stw		r3,12(r26)

			e_bl		enable_none
			e_li		r4,0x0400		#DONE mask


################################################################################
# the main loop
################################################################################
main_xloop:		e_bl		led_green		# ready
			e_bl		uart_recv		# get cmd from UART
			e_bl		led_red			# busy


################################################################################
# 0x51 = readout
################################################################################
main_read:		e_cmp16i	r29,0x51		# read?
			se_bne		main_program

main_read_1:		e_bl		get_word		# get addr byte

			e_bl		wait1			# wait a little bit before sending
			e_li		r7,0

main_read_2:		e_lbz		r29,0(r30)
			e_addi		r30,r30,1
			e_bl		uart_send
			e_bl		wait1
			se_addi		r7,1
			e_cmp16i	r7,block_size
			se_blt		main_read_2
			se_b		main_xloop


################################################################################
# 0x52 = program code
################################################################################
main_program:		e_cmp16i	r29,0x52		# program?
			se_bne		main_erase
			e_bl		enable_main		#enable main flash
			se_b		do_prog

################################################################################
# 0x53 = erase
################################################################################
main_erase:		e_cmp16i	r29,0x53		# erase?
			se_bne		shadow_program
			e_bl		enable_main		#enable main flash
			se_b		do_erase

################################################################################
# 0x72 = program shadow
################################################################################
shadow_program:		e_cmp16i	r29,0x72		# program?
			se_bne		shadow_erase
			e_bl		enable_shadow		#enable shadow flash
			se_b		do_prog			# program

################################################################################
# 0x73 = erase data
################################################################################
shadow_erase:		e_cmp16i	r29,0x73		# program?
			se_bne		main_xloop
			e_bl		enable_shadow		#enable shadow flash
			se_b		do_erase		# program

################################################################################
# erase
################################################################################
do_erase:		se_li		r7,0x04			#set ERS
			se_stw		r7,0(r28)

			se_stw		r6,0(r6)		#dummy write

			se_li		r7,0x05			#set EHV
			se_stw		r7,0(r28)

wait_done_e:		se_lwz		r7,0(r28)		#get mcr
			se_and		r7,r4
			se_cmp		r7,r4
			se_blt		wait_done_e

			se_li		r7,0x04			#clear EHV
			se_stw		r7,0(r28)

			se_li		r7,0x00			#clear ERS
			se_stw		r7,0(r28)

			se_li		r29,0x00		# OK
			e_bl		uart_send		# send

			se_b		main_xloop



################################################################################
# program routine
################################################################################
do_prog:		e_bl		get_word		# get addr word
			se_mr		r6,r30			# copy address

			se_li		r5,0			# counter
			e_lis		r27,0x4000		# RAM buffer pointer
			e_li		r7,0x1000
			se_or		r27,r7

			#copy data
do_prog_1:		e_bl		uart_recv		# get byte
			se_stb		r29,0(r27)		# store
			e_addi		r27,r27,1		# next addr
			se_addi		r5,1
			e_cmp16i	r5,block_size
			se_bne		do_prog_1

			#now prog
			se_li		r5,0			# counter
			e_lis		r27,0x4000		# RAM buffer pointer
			e_li		r7,0x1000
			se_or		r27,r7

			se_li		r7,0x10			#set PGM
			se_stw		r7,0(r28)


do_prog_2:		se_lwz		r30,0(r27)		# get from buffer
			se_stw		r30,0(r6)		# store
			se_lwz		r30,4(r27)		# get from buffer
			se_stw		r30,4(r6)		# store

			se_li		r7,0x11			# set PGM + EHV
			se_stw		r7,0(r28)

wait_done_p:		se_lwz		r7,0(r28)		# get mcr
			se_and		r7,r4
			se_cmp		r7,r4
			se_blt		wait_done_p

			se_li		r7,0x10			# clear EHV
			se_stw		r7,0(r28)

			se_addi		r27,8			# increment src addr
			se_addi		r6,8			# increment dst addr

			se_addi		r5,8			# counter
			e_cmp16i	r5,block_size
			se_blt		do_prog_2

			se_li		r27,0x00		#clear PGM
			se_stw		r27,0(r28)

			se_li		r29,0x00		# OK
			e_bl		uart_send		# send

			se_b		main_xloop


################################################################################
# set RED LED on and GREEN off
################################################################################
led_red:
.if DEBUG_LED == 1
			e_stwu		rsp,-12(rsp)
			se_stw		r24,0(rsp)
			se_stw		r25,4(rsp)
			se_stw		r28,8(rsp)
			e_lis		r24,SIUL_BASE
			e_li		r25,GPDO11
			se_or		r25,r24
			se_li		r28,0x01
			se_stb		r28,1(r25)
			se_li		r28,0x00
			se_stb		r28,2(r25)
			se_lwz		r28,8(rsp)
			se_lwz		r25,4(rsp)
			se_lwz		r24,0(rsp)
			se_addi		rsp,12
.endif
			se_blr

################################################################################
# set RED LED off and GREEN on
################################################################################
led_green:
.if DEBUG_LED == 1
			e_stwu		rsp,-12(rsp)
			se_stw		r24,0(rsp)
			se_stw		r25,4(rsp)
			se_stw		r28,8(rsp)
			e_lis		r24,SIUL_BASE
			e_li		r25,GPDO11
			se_or		r25,r24
			se_li		r28,0x00
			se_stb		r28,1(r25)
			se_li		r28,0x01
			se_stb		r28,2(r25)
			se_lwz		r28,8(rsp)
			se_lwz		r25,4(rsp)
			se_lwz		r24,0(rsp)
			se_addi		rsp,12
.endif
			se_blr


################################################################################
# send UART byte (r29)
################################################################################
uart_send:		e_stwu		rsp,-8(rsp)
			se_stw		r24,0(rsp)
			e_stw		r28,4(rsp)
			e_lis		r24,LINFLEX0_BASE
			e_stw		r29,BRDL(r24)
uart_send_1:		e_lbz		r28,UARTSR+3(r24)
			se_andi		r28,2
			e_cmp16i	r28,2
			se_blt		uart_send_1
			se_li		r28,2
			e_stb		r28,UARTSR+3(r24)
			se_lwz		r24,0(rsp)
			se_lwz		r28,4(rsp)
			se_addi		rsp,8
			se_blr

################################################################################
# receive UART byte (r29)
################################################################################
uart_recv:		e_stwu		rsp,-8(rsp)
			se_stw		r24,0(rsp)
			e_stw		r28,4(rsp)
			e_lis		r24,LINFLEX0_BASE
uart_recv_1:		e_lwz		r28,UARTSR(r24)
			se_andi		r28,4
			e_cmp16i	r28,4
			se_bne		uart_recv_1
			e_li		r28,0x204
			e_stw		r28,UARTSR(r24)
			e_lwz		r29,BRDM(r24)
			se_lwz		r24,0(rsp)
			se_lwz		r28,4(rsp)
			se_addi		rsp,8
			se_blr


################################################################################
# wait1 n
################################################################################
wait1:			e_stwu		rsp,-4(rsp)
			se_stw		r24,0(rsp)
			e_li		r24,0
wait1_2:		e_add16i	r24,r24,1
			e_cmp16i	r24,10
			se_blt		wait1_2
			se_lwz		r24,0(rsp)
			se_addi		rsp,4
			se_blr


################################################################################
# wait2 n
################################################################################
wait2:			e_stwu		rsp,-8(rsp)
			se_stw		r24,0(rsp)
			se_stw		r25,4(rsp)
			e_li		r25,0
wait2_1:		e_li		r24,0
wait2_2:		e_add16i	r24,r24,1
			e_cmp16i	r24,1000
			se_blt		wait2_2
			e_add16i	r25,r25,1
			e_cmp16i	r25,1000
			se_blt		wait2_1
			se_lwz		r25,4(rsp)
			se_lwz		r24,0(rsp)
			se_addi		rsp,8
			se_blr

################################################################################
# get a 32 bit value to R30
################################################################################
get_word:		e_stwu		rsp,-8(rsp)
			se_stw		r6,0(rsp)
			se_stw		r7,4(rsp)
			se_mflr		r3
			se_li		r30,0			# initial value
			e_li		r6,0xff
			se_li		r7,0
get_word_1:		se_bl		uart_recv		# get addr byte
			se_and		r29,r6			# limit to byte range
			se_slwi		r30,8			# shift left 8 bits
			se_add		r30,r29			# add new byte
			e_add16i	r7,r7,1			# loop counter + 1
			e_cmp16i	r7,4			# all done?
			se_blt		get_word_1		# branch if not
			se_lwz		r7,4(rsp)
			se_lwz		r6,0(rsp)
			se_addi		rsp,8
			se_mtlr		r3
			se_blr


################################################################################
# enable main flash
################################################################################
enable_main:		e_lis		r2,0x0010		#config LML, preserve shadow
			e_li		r3,0x0000
			se_or		r3,r2
			se_stw		r3,4(r26)

			e_lis		r2,0x0000		#config HBL
			e_li		r3,0x0000
			se_or		r3,r2
			se_stw		r3,8(r26)

			e_lis		r2,0x0010		#config SLL, preserve shadow
			e_li		r3,0x0000
			se_or		r3,r2
			se_stw		r3,12(r26)

			e_lis		r2,0x0003
			e_li		r3,0x03ff
			se_or		r3,r2
			se_stw		r3,0x10(r26)		# set LMS

			e_li		r2,0x0003
			se_stw		r2,0x14(r26)		# set HBS

			e_lis		r6,0x0000
			se_mr		r28,r26

			se_blr


################################################################################
# enable shadow flash
################################################################################
enable_shadow:		e_lis		r2,0x0003		#config LML, only shadow
			e_li		r3,0x03ff
			se_or		r3,r2
			se_stw		r3,4(r26)

			e_lis		r2,0x0000		#config HBL
			e_li		r3,0x003f
			se_or		r3,r2
			se_stw		r3,4(r26)

			e_lis		r2,0x0003		#config SLL, only shadow
			e_li		r3,0x03ff
			se_or		r3,r2
			se_stw		r3,12(r26)

			e_lis		r6,0x00F0
			se_mr		r28,r26

			se_blr


################################################################################
# enable shadow flash
################################################################################
enable_none:		e_lis		r2,0x0013		#config LML
			e_li		r3,0x03ff
			se_or		r3,r2
			se_stw		r3,4(r26)

			e_lis		r2,0x0000		#config HBL
			e_li		r3,0x003f
			se_or		r3,r2
			se_stw		r3,4(r26)

			e_lis		r2,0x0013		#config SLL
			e_li		r3,0x03ff
			se_or		r3,r2
			se_stw		r3,12(r26)

			e_lis		r6,0x0000
			se_mr		r28,r26

			se_blr


