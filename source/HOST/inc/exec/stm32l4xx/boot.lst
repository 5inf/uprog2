ARM GAS  boot.asm 			page 1


   1              			.include "include/regdefs.asm"
   1              		//I/O register definitions for FLASH
   2              	
   3              		.equ	FLASH_BASE	, 0x40022000
   4              		.equ	FLASH_ACR	, 0x00
   5              		.equ	FLASH_PDKEYR	, 0x04
   6              		.equ	FLASH_KEYR	, 0x08
   7              		.equ	FLASH_OPTKEYR	, 0x0C
   8              		.equ	FLASH_SR	, 0x10
   9              		.equ	FLASH_CR	, 0x14
  10              		.equ	FLASH_ECCR	, 0x18
  11              		.equ	FLASH_OPTR	, 0x20
  12              		.equ	FLASH_PCROP1SR	, 0x24
  13              		.equ	FLASH_PCROP1ER	, 0x28
  14              		.equ	FLASH_WRP1AR	, 0x2C
  15              		.equ	FLASH_WRP1BR	, 0x30
  16              		.equ	FLASH_PCROP2SR	, 0x44
  17              		.equ	FLASH_PCROP2ER	, 0x48
  18              		.equ	FLASH_WRP2AR	, 0x4C
  19              		.equ	FLASH_WRP2BR	, 0x50
  20              		
  21              		
  22              		//I/O register definitions for RCC
  23              		.equ	RCC_BASE	, 0x40021000
  24              		.equ	RCC_AHB2ENR	, 0x4C
  25              		
  26              		
  27              		//I/O register definitions for PORT C
  28              		.equ	PORTC_BASE	, 0x48000800
  29              		.equ	PORTC_MODER	, 0x00
  30              		.equ	PORTC_IDR	, 0x10
  31              		.equ	PORTC_ODR	, 0x14
  32              		
  33              		
  34              		
   2              	
   3              			.text
   4              			.thumb
   5              	
   6              			.org 0x00000
   7              		
   8              	reset_vector:
   9              	
  10 0000 00800020 			.word 0x20008000	// start SP
  11 0004 09000020 			.word 0x20000009	// start PC
  12              	
  13              	main_start:
  14              	################################################################################
  15              	# set rcc
  16              	################################################################################
  17              	#			ldr	r4, =RCC_BASE
  18              	#			mov	r3,#0x04		//PORTC enable
  19              	#			str	r3,[r4,#RCC_AHB2ENR]
  20              	
  21              	#			ldr	r5, =PORTC_BASE
  22              	#			ldr	r3, =0x01100000		//PORTC enable
  23              	#			str	r3,[r5,#PORTC_MODER]
ARM GAS  boot.asm 			page 2


  24              	#			ldr	r3, =0x1000		//PORTC set
  25              	#			str	r3,[r5,#PORTC_ODR]
  26              						
  27              	################################################################################
  28              	# set wait states
  29              	################################################################################
  30              	#			ldr	r4, =FLASH_BASE
  31              	#			mov	r3,#0x01		//1 wait state
  32              	#			str	r3,[r4,#FLASH_ACR]
  33              	
  34              	################################################################################
  35              	# the main loop
  36              	################################################################################
  37 0008 2449     	main_loop:		ldr	r1, =0x20000c00		//cmd word
  38 000a 0022     				mov	r2,#0		
  39 000c 0A60     				str	r2,[r1,#0]		//set to zero
  40              	#			ldr	r3, =0x0100		//PORTC set
  41              	#			str	r3,[r5,#PORTC_ODR]
  42              	
  43              	
  44 000e 0868     	main_loop_wait:		ldr	r0, [r1,#0]
  45 0010 9042     				cmp	r0, r2
  46 0012 FCD0     				beq	main_loop_wait
  47              				
  48 0014 224C     				ldr	r4, =FLASH_BASE
  49              	#			ldr	r3, =0x0200		//PORTC set
  50              	#			str	r3,[r5,#PORTC_ODR]
  51              				
  52 0016 071C     				mov	r7,r0			//address
  53 0018 224A     				ldr	r2,=0xFFFFFF00
  54 001a 1740     				and	r7,r2
  55 001c FF22     				mov	r2,#0xff
  56 001e 1040     				and	r0,r2			
  57              	
  58 0020 5228     				cmp	r0, #0x52		// prog main flash
  59 0022 05D0     				beq	prog_flash
  60              	
  61 0024 7228     				cmp	r0, #0x72		// prog option bytes
  62              	//			beq	x_prog_opt
  63              	
  64 0026 7328     				cmp	r0, #0x73		// option bytes erase
  65              	//			beq	opt_erase			
  66              				
  67 0028 EEE7     	tloop:			b	main_loop
  68              	
  69 002a 16E0     	x_prog_opt:		b	prog_opt			
  70 002c ECE7     				b	main_loop
  71              	
  72              	################################################################################
  73              	# option bytes erase is not available
  74              	################################################################################
  75 002e EBE7     	opt_erase:		b	main_loop		//done
  76              	
  77              	
  78              	################################################################################
  79              	# program 2K flash
  80              	################################################################################
ARM GAS  boot.asm 			page 3


  81 0030 00F027F8 	prog_flash:		bl	main_unlock		//unlock
  82              	
  83 0034 1C49     				ldr	r1, =0x20000400		//buffer base
  84 0036 1D4E     				ldr	r6, =0x100		//lwords to do			
  85              	
  86 0038 0122     				mov	r2,#0x01		//set PG
  87 003a 6261     				str	r2, [r4,#FLASH_CR]
  88              				
  89 003c 0868     	prog_flash_1:		ldr	r0,[r1,#0]		//get data 1
  90 003e 3860     				str	r0,[r7,#0]		//store word 1
  91              	
  92 0040 0437     				add	r7,#4			//flash addr
  93 0042 0431     				add	r1,#4			//buffer addr
  94              	
  95 0044 0868     				ldr	r0,[r1,#0]		//get data 1
  96 0046 3860     				str	r0,[r7,#0]		//store word 2
  97              	
  98 0048 194B     				ldr	r3, =0x010000		//BSY
  99 004a 2269     	prog_flash_3:		ldr	r2, [r4,#FLASH_SR]
 100 004c 1A42     				tst	r2,r3
 101 004e FCD1     				bne	prog_flash_3		//BNE
 102              	
 103 0050 0437     	prog_flash_4:		add	r7,#4			//flash addr
 104 0052 0431     				add	r1,#4			//buffer addr
 105              	
 106 0054 013E     				sub	r6,#1
 107 0056 F1D1     				bne	prog_flash_1			
 108              				
 109 0058 D6E7     				b	main_loop
 110              	
 111              	
 112              	################################################################################
 113              	# program option bytes
 114              	################################################################################
 115 005a 164A     	prog_opt:		ldr	r2, =0x08192A3B		//key 1
 116 005c 164B     				ldr	r3, =0x4C5D6E7F		//key 2
 117              	//			str	r2,[r4,#FLASH_KEYR]	//write key 1	
 118              	//			str	r3,[r4,#FLASH_KEYR]	//write key 2	
 119 005e E260     				str	r2,[r4,#FLASH_OPTKEYR]	//write key 1	
 120 0060 E360     				str	r3,[r4,#FLASH_OPTKEYR]	//write key 2	
 121              		
 122 0062 1149     				ldr	r1, =0x20000400		//buffer base
 123              	
 124 0064 0E4C     				ldr	r4, =FLASH_BASE
 125 0066 0023     				mov	r3,#0
 126 0068 6361     				str	r3,[r4,#FLASH_CR]
 127              	
 128 006a 0868     	prog_opt_1:		ldr	r0,[r1,#0]		//get data
 129 006c 134A     				ldr	r2, = 0x80FFFFEC
 130 006e 1040     				and	r0,r2
 131 0070 6061     				str	r0,[r4,#FLASH_CR]
 132 0072 0222     				mov	r2,#0x02
 133 0074 1043     				orr	r0,r2
 134 0076 6061     				str	r0,[r4,#FLASH_CR]
 135              				
 136 0078 0D4B     				ldr	r3, =0x010000		//BSY
 137 007a 2269     	prog_opt_3:		ldr	r2, [r4,#FLASH_SR]
ARM GAS  boot.asm 			page 4


 138 007c 1A42     				tst	r2,r3
 139 007e FCD1     				bne	prog_opt_3
 140              				
 141 0080 C2E7     				b	main_loop
 142              	
 143              	
 144              	################################################################################
 145              	# unlock main flash
 146              	################################################################################
 147 0082 074C     	main_unlock:		ldr	r4, =FLASH_BASE
 148 0084 6269     				ldr	r2,[r4,#FLASH_CR]
 149 0086 0E4B     				ldr	r3,=0x80000000
 150 0088 1A40     				and	r2,r3
 151 008a 9342     				cmp	r3,r2
 152 008c 03D1     				bne	main_unlock_1		//is already unlocked
 153              				
 154 008e 0D4A     				ldr	r2, =0x45670123		//key 1
 155 0090 0D4B     				ldr	r3, =0xCDEF89AB		//key 2
 156 0092 A260     				str	r2,[r4,#FLASH_KEYR]	//write key 1	
 157 0094 A360     				str	r3,[r4,#FLASH_KEYR]	//write key 2	
 158 0096 0023     	main_unlock_1:		mov	r3,#0
 159 0098 6361     				str	r3,[r4,#FLASH_CR]
 160              	
 161 009a 7047     				bx	lr
 162              						
 163              				.align 2
 164              			
 165 009c 000C0020 	
 165      00200240 
 165      00FFFFFF 
 165      00040020 
 165      00010000 
