TMS320C2000 Assembler Unix v6.1.3 Tue Nov  5 15:20:54 2013

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
boot_stage1.asm                                                      PAGE    1

       1                      .include "registers.inc"
       2              
       3        0002  LED_1           .equ    0x0002
       4        0020  LED_2           .equ    0x0020
       5              
       6              
       7                              ;macros for LED setting
       8              SET_LED_00      .macro
       9                              movw    DP,#GPIO_DATA_DP                ;set data pointer to GPIO-Data-registers start
      10                              mov     @GPASET_L,#(LED_1 | LED_2)      ;all off
      11                              .endm
      12              
      13                              ;macros for LED setting
      14              SET_LED_01      .macro
      15                              movw    DP,#GPIO_DATA_DP                ;set data pointer to GPIO-Data-registers start
      16                              mov     @GPASET_L,#LED_2                ;LED 2 off
      17                              mov     @GPACLEAR_L,#LED_1              ;LED 1 on
      18                              .endm
      19              
      20              
      21                              ;macros for LED setting
      22              SET_LED_10      .macro
      23                              movw    DP,#GPIO_DATA_DP                ;set data pointer to GPIO-Data-registers start
      24                              mov     @GPASET_L,#LED_1                ;LED 1 off
      25                              mov     @GPACLEAR_L,#LED_2              ;LED 2 on
      26                              .endm
      27              
      28              
      29                              ;macros for LED setting
      30              SET_LED_11      .macro
      31                              movw    DP,#GPIO_DATA_DP                ;set data pointer to GPIO-Data-registers start
      32                              mov     @GPACLEAR_L,#(LED_1 | LED_2)    ;all on
      33                              .endm
      34              
      35              
      36              
      37        0080  SPX_CLKMASK     .equ    0x0080                          ;use GPIO23 as clock
      38        0040  SPX_DATMASK     .equ    0x0040                          ;use GPIO22 as data
      39        FFBF  SPX_DATMASKI    .equ    0xffbf                          ;use GPIO22 as data (inverted)
      40              
      41              ;.text:
      42              
      43                      .setsect ".text",0x0040
      44 00000040 7622  start:          eallow
      45 00000041 3B10                  dint
      46 00000042 761F                  movw    DP,#CLOCK_DP                    ;set data pointer to CLOCK-registers start
         00000043 01C0 
      47 00000044 2829                  mov     @WDCR,#0x006F                   ;
         00000045 006F 
      48 00000046 2821                  mov     @PLLCR,#0x0005                  ;50MHz
         00000047 0005 
      49              
      50 00000048 761F                  movw    DP,#GPIO_CTRL_DP                ;set data pointer to GPIO-Control-registers start
         00000049 01BE 
      51 0000004a 2B06                  mov     @GPAMUX1,#0x0000                ;
TMS320C2000 Assembler Unix v6.1.3 Tue Nov  5 15:20:54 2013

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
boot_stage1.asm                                                      PAGE    2

      52 0000004b 2B08                  mov     @GPAMUX2,#0x0000                ;
      53 0000004c 280A                  mov     @GPADIR_L,#0x0022               ;
         0000004d 0022 
      54 0000004e 2B0B                  mov     @GPADIR_H,#0x0000               ;
      55              
      56 0000004f 761F                  movw    DP,#CSM_DP                      ;set data pointer to CSM-registers start
         00000050 002B 
      57 00000051 922F                  mov     AL,@CSMSCR
      58 00000052 FFA0                  asr     AL,1
      59 00000053 6825                  b       unlocked,NC
      60              
      61                              .copy "unlock.asm"
 B     1              
 B     2 00000054 2820                  movw    @KEY0,#0x7777                   ;this is the default key
         00000055 7777 
 B     3 00000056 2821                  movw    @KEY1,#0x7777
         00000057 7777 
 B     4 00000058 2822                  movw    @KEY2,#0x7777
         00000059 7777 
 B     5 0000005a 2823                  movw    @KEY3,#0x7777
         0000005b 7777 
 B     6 0000005c 2824                  movw    @KEY4,#0x7777
         0000005d 7777 
 B     7 0000005e 2825                  movw    @KEY5,#0x7777
         0000005f 7777 
 B     8 00000060 2826                  movw    @KEY6,#0x7777
         00000061 7777 
 B     9 00000062 2827                  movw    @KEY7,#0x7777
         00000063 7777 
 B    10              
      62              
      63 00000064 761F                  movw    DP,#0xFDFF                      ;set data pointer to CSM-registers start
         00000065 FDFF 
      64 00000066 9238                  movw    AL,@0x38
      65 00000067 9239                  movw    AL,@0x39
      66 00000068 923A                  movw    AL,@0x3a
      67 00000069 923B                  movw    AL,@0x3b
      68 0000006a 923C                  movw    AL,@0x3c
      69 0000006b 923D                  movw    AL,@0x3d
      70 0000006c 923E                  movw    AL,@0x3e
      71 0000006d 923F                  movw    AL,@0x3f
      72              
      73 0000006e 761F                  movw    DP,#CSM_DP                      ;set data pointer to CSM-registers start
         0000006f 002B 
      74 00000070 922F                  mov     AL,@CSMSCR
      75 00000071 FFA0                  asr     AL,1
      76 00000072 6806                  b       unlocked,NC
      77              
      78              
      79 00000073       set_err:        SET_LED_11                              ;2 LED, error
1        00000073 761F                  movw    DP,#GPIO_DATA_DP                ;set data pointer to GPIO-Data-registers start
         00000074 01BF 
1        00000075 2804                  mov     @GPACLEAR_L,#(LED_1 | LED_2)    ;all on
         00000076 0022 
      80 00000077 6F00  err_end:        b       err_end,UNC
TMS320C2000 Assembler Unix v6.1.3 Tue Nov  5 15:20:54 2013

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
boot_stage1.asm                                                      PAGE    3

      81              
      82                              ;OK, we can start
      83 00000078 3B10  unlocked:       dint
      84 00000079                       SET_LED_01                              ;LED 1, OK
1        00000079 761F                  movw    DP,#GPIO_DATA_DP                ;set data pointer to GPIO-Data-registers start
         0000007a 01BF 
1        0000007b 2802                  mov     @GPASET_L,#LED_2                ;LED 2 off
         0000007c 0020 
1        0000007d 2804                  mov     @GPACLEAR_L,#LED_1              ;LED 1 on
         0000007e 0002 
      85              
      86 0000007f 8D3F  read_boot:      movl    XAR0,#0x003f8000
         00000080 8000 
      87 00000081 28A1                  movw    AR1,#0x13ff                     ;words to do -1
         00000082 13FF 
      88              
      89 00000083 0080' read_boot_1:    lc      read_word                       ;read word to AR2
         00000084 00A3 
      90 00000085                       SET_LED_00                              ;LED OFF
1        00000085 761F                  movw    DP,#GPIO_DATA_DP                ;set data pointer to GPIO-Data-registers start
         00000086 01BF 
1        00000087 2802                  mov     @GPASET_L,#(LED_1 | LED_2)      ;all off
         00000088 0022 
      91 00000089 7E80                  movw    *XAR0++,AR6                     ;store word to RAM
      92 0000008a 0009                  banz    read_boot_1,AR1--               ;loop until all words done
         0000008b FFF9 
      93              
      94 0000008c 761F  exit:           movw    DP,#GPIO_DATA_DP                ;set data pointer to GPIO-Data-registers start
         0000008d 01BF 
      95              
      96 0000008e 8D3F                  movl    XAR0,#0x003f8000
         0000008f 8000 
      97 00000090 28A1                  movw    AR1,#0x13fe                     ;words to do -1
         00000091 13FE 
      98 00000092 2BA2                  movw    AR2,#0                          ;start value
      99 00000093 9280  check_boot_1:   movw    AL,*XAR0++
     100 00000094 94A2                  add     AL,AR2
     101 00000095 96A2                  movw    AR2,AL
     102 00000096 0009                  banz    check_boot_1,AR1--              ;loop until all words done
         00000097 FFFD 
     103 00000098 9280                  movw    AL,*XAR0++                      ;this is the stored hexsum
     104 00000099 54A2                  cmp     AL,AR2
     105 0000009a 60D9                  b       set_err,NEQ                     ;err if checksum failed
     106              
     107 0000009b                       SET_LED_10                              ;LED 1, OK
1        0000009b 761F                  movw    DP,#GPIO_DATA_DP                ;set data pointer to GPIO-Data-registers start
         0000009c 01BF 
1        0000009d 2802                  mov     @GPASET_L,#LED_1                ;LED 1 off
         0000009e 0002 
1        0000009f 2804                  mov     @GPACLEAR_L,#LED_2              ;LED 2 on
         000000a0 0020 
     108 000000a1       test1:  ;       b       test1,UNC
     109                              .copy "jump_to_c.asm"
 C     1 000000a1 007F  xtest:          lb      #0x3f89c6
         000000a2 89C6 
TMS320C2000 Assembler Unix v6.1.3 Tue Nov  5 15:20:54 2013

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
boot_stage1.asm                                                      PAGE    4

     110              
     111 000000a3 761F  read_word:      movw    DP,#GPIO_DATA_DP                ;set data pointer to GPIO-Data-registers start
         000000a4 01BF 
     112              
     113 000000a5 8501  read_word_01:   movw    ACC,@GPADAT_H
     114 000000a6 3E00                  and     ACC,#SPX_CLKMASK
         000000a7 0080 
     115 000000a8 6117                  b       read_word_10,EQ                 ;OK, clock is low
     116 000000a9 2803                  movw    @GPASET_H,#SPX_DATMASK          ;set data to HIGH
         000000aa 0040 
     117 000000ab 761F                  movw    DP,#GPIO_CTRL_DP                ;set data pointer to GPIO-control-registers start
         000000ac 01BE 
     118 000000ad 850B                  movw    ACC,@GPADIR_H                   ;set data to output
     119 000000ae 3E10                  or      ACC,#SPX_DATMASK
         000000af 0040 
     120 000000b0 960B                  movw    @GPADIR_H,ACC
     121 000000b1 761F                  movw    DP,#GPIO_DATA_DP                ;set data pointer to GPIO-Data-registers start
         000000b2 01BF 
     122 000000b3 8501  read_word_02:   movw    ACC,@GPADAT_H
     123 000000b4 3E00                  and     ACC,#SPX_CLKMASK
         000000b5 0080 
     124 000000b6 60FD                  b       read_word_02,NEQ                ;wait for clock low
     125 000000b7 761F                  movw    DP,#GPIO_CTRL_DP                ;set data pointer to GPIO-control-registers start
         000000b8 01BE 
     126 000000b9 850B                  movw    ACC,@GPADIR_H                   ;set data to input
     127 000000ba 3E00                  and     ACC,#SPX_DATMASKI
         000000bb FFBF 
     128 000000bc 960B                  movw    @GPADIR_H,ACC
     129 000000bd 761F                  movw    DP,#GPIO_DATA_DP                ;set data pointer to GPIO-Data-registers start
         000000be 01BF 
     130              
     131 000000bf 28A5  read_word_10:   movw    AR5,#7                          ;loops -1
         000000c0 0007 
     132              
     133 000000c1 8501  read_word_12:   movw    ACC,@GPADAT_H                   ;wait for clock high
     134 000000c2 3E00                  and     ACC,#SPX_CLKMASK
         000000c3 0080 
     135 000000c4 61FD                  b       read_word_12,EQ                 ;branch if clock is low
     136 000000c5 92A6                  movw    AL,AR6                          ;get data
     137 000000c6 FF30                  lsl     ACC,1                           ;shift
     138 000000c7 96A6                  movw    AR6,AL                          ;save current state
     139 000000c8 8501                  movw    ACC,@GPADAT_H                   ;get data
     140 000000c9 3E00                  and     ACC,#SPX_DATMASK                ;check data bit
         000000ca 0040 
     141 000000cb 6104                  b       read_word_14,EQ                 ;branch if data bit is zero is low
     142 000000cc 92A6                  movw    AL,AR6                          ;get data
     143 000000cd 0AA9                  inc     AL                              ;make bit 0 to one
     144 000000ce 96A6                  movw    AR6,AL                          ;save current state
     145              
     146 000000cf 8501  read_word_14:   movw    ACC,@GPADAT_H                   ;wait for clock low
     147 000000d0 3E00                  and     ACC,#SPX_CLKMASK
         000000d1 0080 
     148 000000d2 60FD                  b       read_word_14,NEQ                ;branch if clock is high
     149 000000d3 92A6                  movw    AL,AR6                          ;get data
     150 000000d4 FF30                  lsl     ACC,1                           ;shift
TMS320C2000 Assembler Unix v6.1.3 Tue Nov  5 15:20:54 2013

Tools Copyright (c) 1996-2012 Texas Instruments Incorporated
boot_stage1.asm                                                      PAGE    5

     151 000000d5 96A6                  movw    AR6,AL                          ;save current state
     152 000000d6 8501                  movw    ACC,@GPADAT_H                   ;get data
     153 000000d7 3E00                  and     ACC,#SPX_DATMASK                ;check data bit
         000000d8 0040 
     154 000000d9 6104                  b       read_word_16,EQ                 ;branch if data bit is zero is low
     155 000000da 92A6                  movw    AL,AR6                          ;get data
     156 000000db 0AA9                  inc     AL                              ;make bit 0 to one
     157 000000dc 96A6                  movw    AR6,AL                          ;save current state
     158 000000dd 000D  read_word_16:   banz    read_word_12,AR5--
         000000de FFE4 
     159              
     160 000000df 8501  read_word_18:   movw    ACC,@GPADAT_H                   ;wait for clock high
     161 000000e0 3E00                  and     ACC,#SPX_CLKMASK
         000000e1 0080 
     162 000000e2 61FD                  b       read_word_18,EQ                 ;branch if clock is low
     163              
     164 000000e3 2803                  movw    @GPASET_H,#SPX_DATMASK          ;set data to HIGH
         000000e4 0040 
     165 000000e5 761F                  movw    DP,#GPIO_CTRL_DP                ;set data pointer to GPIO-control-registers start
         000000e6 01BE 
     166 000000e7 850B                  movw    ACC,@GPADIR_H                   ;set data to output
     167 000000e8 3E10                  or      ACC,#SPX_DATMASK
         000000e9 0040 
     168 000000ea 960B                  movw    @GPADIR_H,ACC
     169 000000eb 761F                  movw    DP,#GPIO_DATA_DP                ;set data pointer to GPIO-Data-registers start
         000000ec 01BF 
     170 000000ed 8501  read_word_20:   movw    ACC,@GPADAT_H
     171 000000ee 3E00                  and     ACC,#SPX_CLKMASK
         000000ef 0080 
     172 000000f0 60FD                  b       read_word_20,NEQ                ;wait for clock low
     173 000000f1 761F                  movw    DP,#GPIO_CTRL_DP                ;set data pointer to GPIO-control-registers start
         000000f2 01BE 
     174 000000f3 850B                  movw    ACC,@GPADIR_H                   ;set data to input
     175 000000f4 3E00                  and     ACC,#SPX_DATMASKI
         000000f5 FFBF 
     176 000000f6 960B                  movw    @GPADIR_H,ACC
     177              
     178 000000f7 7614                  lret                                    ;OK, thats all
     179              

No Assembly Errors, No Assembly Warnings
